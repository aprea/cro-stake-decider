import equal from 'fast-deep-equal/es6';
import type { NextPage } from 'next';
import Head from 'next/head';
import { memo, useState } from 'react';
import { Container, Form, Navbar, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';
import type { FormControlProps } from 'react-bootstrap/esm/FormControl';
import type { ToggleButtonRadioProps } from 'react-bootstrap/esm/ToggleButtonGroup';

enum PerkType {
	Spotify,
	Netflix,
	AmazonPrime,
}

type Perk = {
	id: PerkType;
	name: string;
	value: number;
};

const perks: Record<PerkType, Perk> = Object.freeze( {
	[ PerkType.Spotify ]: {
		id: PerkType.Spotify,
		name: 'Spotify',
		value: 13.99,
	},
	[ PerkType.Netflix ]: {
		id: PerkType.Netflix,
		name: 'Netflix',
		value: 13.99,
	},
	[ PerkType.AmazonPrime ]: {
		id: PerkType.AmazonPrime,
		name: 'Amazon Prime',
		value: 14.99,
	},
} );

enum CardTier {
	Ruby,
	JadeIndigo,
	IcyRose,
	Obsidian,
}

type Card = {
	cashbackRate: number;
	id: CardTier;
	monthlyCap: number | false;
	name: string;
	noStakeCashbackRate: number;
	perks: PerkType[];
	stakingRewards: number;
};

const cards: Record<CardTier, Card> = Object.freeze( {
	[ CardTier.Ruby ]: {
		cashbackRate: 0.01,
		id: CardTier.Ruby,
		monthlyCap: 25,
		name: 'Ruby Steel',
		noStakeCashbackRate: 0,
		perks: [ PerkType.Spotify ],
		stakingRewards: 0,
	},
	[ CardTier.JadeIndigo ]: {
		cashbackRate: 0.02,
		id: CardTier.JadeIndigo,
		monthlyCap: 50,
		name: 'Royal Indigo or Jade Green',
		noStakeCashbackRate: 0,
		perks: [ PerkType.Spotify, PerkType.Netflix ],
		stakingRewards: 0,
	},
	[ CardTier.IcyRose ]: {
		id: CardTier.IcyRose,
		cashbackRate: 0.03,
		monthlyCap: false,
		name: 'Rose Gold or Icy White',
		noStakeCashbackRate: 0.01,
		perks: [ PerkType.Spotify, PerkType.Netflix, PerkType.AmazonPrime ],
		stakingRewards: 0.08,
	},
	[ CardTier.Obsidian ]: {
		id: CardTier.Obsidian,
		cashbackRate: 0.05,
		monthlyCap: false,
		name: 'Obsidian',
		noStakeCashbackRate: 0.02,
		perks: [ PerkType.Spotify, PerkType.Netflix, PerkType.AmazonPrime ],
		stakingRewards: 0.08,
	},
} );

const AppHeader: React.FC = memo( () => (
	<Navbar bg="dark" expand="lg" fixed="top" variant="dark">
		<Container fluid>
			<Navbar.Brand href="#home">
				<svg fill="none" viewBox="0 0 32 37" xmlns="http://www.w3.org/2000/svg"><path d="M22.129 29.168H19.87l-2.702-2.454v-1.259l2.798-2.643v-4.185l3.656-2.36 4.165 3.116-5.66 9.785zm-9.348-6.607.414-3.934-1.368-3.524h8.076l-1.335 3.524.381 3.934h-6.168zm1.844 4.153L11.923 29.2h-2.29l-5.69-9.817 4.196-3.084 3.688 2.328v4.185l2.798 2.643v1.259zM9.602 7.834h12.495l1.494 6.294H8.14l1.463-6.293zM15.865 0 0 9.062v18.124l15.865 9.062 15.865-9.062V9.062L15.865 0z" fill="#fff" /></svg>
				CRO Stake Decider
			</Navbar.Brand>
		</Container>
	</Navbar>
) );

const Home: NextPage = () => {
	const [ userCard, setUserCard ] = useState<CardTier>( CardTier.Ruby );
	const [ userPerks, setUserPerks ] = useState<Set<PerkType>>( new Set() );
	const [ userCardStake, setUserCardStake ] = useState<number|''>( '' );
	const [ userMonthlySpend, setUserMonthlySpend ] = useState<number|''>( '' );
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	const [ perkUSDValues, setPerkUSDValues ] = useState( new Map( Object.values( perks ).map( perk => [ perk.id, perk.value ] ) ) );

	const handleUserCardStakeChange: FormControlProps['onChange'] = e => {
		const newUserCardStake = e.currentTarget.value;
		setUserCardStake( newUserCardStake === '' ? newUserCardStake : Number( newUserCardStake ) );
	};

	const handleUserMonthlySpendChange: FormControlProps['onChange'] = e => {
		const newMonthlySpend = e.currentTarget.value;
		setUserMonthlySpend( newMonthlySpend === '' ? newMonthlySpend : Number( newMonthlySpend ) );
	};

	const handleUserCardChange: ToggleButtonRadioProps<CardTier>['onChange'] = newUserCard => {
		setUserCard( newUserCard );

		const newUserPerks = new Set( userPerks );

		newUserPerks.forEach( userPerk => {
			if ( ! cards[ newUserCard ].perks.includes( userPerk ) ) {
				newUserPerks.delete( userPerk );
			}
		} );

		if ( ! equal( newUserPerks, userPerks ) ) {
			setUserPerks( newUserPerks );
		}
	};

	return (
		<>
			<Head>
				<title>CRO Stake Decider</title>
				<meta content="Generated by create-t3-app" name="description" />
				<link href="/favicon.ico" rel="icon" />
			</Head>
			<div className="App">
				<AppHeader />
				<Container className="container-fluid">
					<Form.Group className="form-group" controlId="user-card">
						<Form.Label>Select your current card</Form.Label>
						<ToggleButtonGroup className="cards" name="user-card" onChange={ handleUserCardChange } type="radio" value={ userCard }>
							{ Object.values( cards ).map( card => {
								const cardNameParts = card.name.split( ' or ' );

								return (
									<ToggleButton className={ `card-${ card.id }` } id={ `card-${ card.id }` } key={ card.id } value={ card.id } variant="card">
										{ cardNameParts.length === 1 ? card.name : [ `${ cardNameParts[ 0 ] } or`, <br key={ card.id } />, cardNameParts[ 1 ] ] }
									</ToggleButton>
								);
							} ) }
						</ToggleButtonGroup>
					</Form.Group>
					<Form.Group className="form-group" controlId="user-card-stake">
						<Form.Label>Your card stake (in CRO)</Form.Label>
						<Form.Control onChange={ handleUserCardStakeChange } pattern="\d+" size="lg" type="number" value={ userCardStake } />
						<Form.Text className="text-muted">
							The total amount of CRO staked for your card.<br />
							i.e. Accounts &rarr; Crypto Wallet &rarr; Cronos &rarr; CRO Stake
						</Form.Text>
					</Form.Group>
					<Form.Group className="form-group" controlId="user-perks">
						<Form.Label className="mb-1">Select your perks</Form.Label>
						<Form.Text className="text-muted mb-4 mt-0">
							Select the services you use.
						</Form.Text>
						<ToggleButtonGroup className="perks" name="user-perks" onChange={ ( val: PerkType[] ) => setUserPerks( new Set( val ) ) } type="checkbox" value={ Array.from( userPerks ) }>
							{ Object.values( perks ).map( perk => (
								<ToggleButton className={ `perk-${ perk.id }` } disabled={ ! cards[ userCard ].perks.includes( perk.id ) } id={ `perk-${ perk.id }` } key={ perk.id } value={ perk.id } variant="card">
									{ perk.name }<br />
									<small className="mt-1">{ `$${ perkUSDValues.get( perk.id ) } USD p/ month` }</small>
								</ToggleButton>
							) ) }
						</ToggleButtonGroup>
					</Form.Group>
					<Form.Group className="form-group" controlId="user-monthly-spend">
						<Form.Label>Your monthly spend</Form.Label>
						<Form.Control onChange={ handleUserMonthlySpendChange } pattern="\d+" size="lg" type="number" value={ userMonthlySpend } />
					</Form.Group>
				</Container>
				<footer className="bg-dark text-center text-white">
					<Container fluid>
						<p><strong>Disclaimer:</strong> Please use this website at your own risk. It is up to you to verify accuracy of the information presented on this website. While every effort has been made to ensure the accuracy and completeness of the information, no guarantee is given nor responsibility taken for errors or omissions in the information presented. In no event will we be liable for you or anyone else for any decision made or action taken in reliance on data from this website.</p>
						<p>This website is provided for informational purposes only. It does not constitute financial, tax or legal advice. For financial or legal advice, please consult your own professional. It cannot guarantee lack of error. As such, we will not be liable for any loss or damage of any nature.</p>
					</Container>
					<div>
						<small>&copy; { new Date().getFullYear() } CRO Stake Decider. All rights reserved.</small>
					</div>
				</footer>

			</div>
		</>
	);
};

export default Home;
